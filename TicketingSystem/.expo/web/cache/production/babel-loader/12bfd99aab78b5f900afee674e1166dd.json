{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Platform from\"react-native-web/dist/exports/Platform\";import Modal from\"../Modal\";import DialogContent from\"./DialogContent\";import DialogActions from\"./DialogActions\";import DialogTitle from\"./DialogTitle\";import DialogScrollArea from\"./DialogScrollArea\";import{withTheme}from\"../../core/theming\";import overlay from\"../../styles/overlay\";var DIALOG_ELEVATION=24;var Dialog=function(_React$Component){_inherits(Dialog,_React$Component);var _super=_createSuper(Dialog);function Dialog(){_classCallCheck(this,Dialog);return _super.apply(this,arguments);}_createClass(Dialog,[{key:\"render\",value:function render(){var _this$props=this.props,children=_this$props.children,dismissable=_this$props.dismissable,onDismiss=_this$props.onDismiss,visible=_this$props.visible,style=_this$props.style,theme=_this$props.theme;return React.createElement(Modal,{dismissable:dismissable,onDismiss:onDismiss,visible:visible,contentContainerStyle:[{borderRadius:theme.roundness,backgroundColor:theme.dark&&theme.mode==='adaptive'?overlay(DIALOG_ELEVATION,theme.colors.surface):theme.colors.surface},styles.container,style]},React.Children.toArray(children).filter(function(child){return child!=null&&typeof child!=='boolean';}).map(function(child,i){if(i===0&&React.isValidElement(child)&&child.type===DialogContent){return React.cloneElement(child,{style:[{paddingTop:24},child.props.style]});}return child;}));}}]);return Dialog;}(React.Component);_defineProperty(Dialog,\"Content\",DialogContent);_defineProperty(Dialog,\"Actions\",DialogActions);_defineProperty(Dialog,\"Title\",DialogTitle);_defineProperty(Dialog,\"ScrollArea\",DialogScrollArea);_defineProperty(Dialog,\"defaultProps\",{dismissable:true,visible:false});var styles=StyleSheet.create({container:{marginVertical:Platform.OS==='android'?44:0,marginHorizontal:26,elevation:DIALOG_ELEVATION,justifyContent:'flex-start'}});export default withTheme(Dialog);","map":{"version":3,"sources":["Dialog.tsx"],"names":["DIALOG_ELEVATION","Dialog","React","DialogContent","DialogActions","DialogTitle","DialogScrollArea","dismissable","visible","theme","borderRadius","backgroundColor","overlay","surface","styles","child","i","style","paddingTop","container","marginVertical","Platform","marginHorizontal","elevation","justifyContent","withTheme"],"mappings":"srCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,8HAEA,MAAA,CAAA,KAAA,gBACA,MAAA,CAAA,aAAA,uBACA,MAAA,CAAA,aAAA,uBAEA,MAAA,CAAA,WAAA,qBACA,MAAA,CAAA,gBAAA,0BACA,OAAA,SAAA,0BACA,MAAA,CAAA,OAAA,4BA0BA,GAAMA,CAAAA,gBAAwB,CAA9B,EAAA,C,GA6CA,CAAA,M,6OAeW,iBAQH,KAPJ,KADO,CACD,QADC,aACD,QADC,CACD,WADC,aACD,WADC,CACD,SADC,aACD,SADC,CACD,OADC,aACD,OADC,CACD,KADC,aACD,KADC,CAOLS,KAPK,aAOLA,KAPK,CAUP,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,CACE,WAAW,CADb,WAAA,CAEE,SAAS,CAFX,SAAA,CAGE,OAAO,CAHT,OAAA,CAIE,qBAAqB,CAAE,CACrB,CACEC,YAAY,CAAED,KAAK,CADrB,SAAA,CAEEE,eAAe,CACbF,KAAK,CAALA,IAAAA,EAAcA,KAAK,CAALA,IAAAA,GAAdA,UAAAA,CACKG,OAAO,CAAA,gBAAA,CAAmBH,KAAK,CAALA,MAAAA,CAD/BA,OACY,CADZA,CAEIA,KAAK,CAALA,MAAAA,CAAaI,OALrB,CADqB,CAQrBC,MAAM,CARe,SAAA,CAAA,KAAA,CAJzB,CAAA,CAgBG,KAAK,CAAL,QAAA,CAAA,OAAA,CAAA,QAAA,EAAA,MAAA,CACUC,SAAAA,KAAD,QAAWA,CAAAA,KAAK,EAALA,IAAAA,EAAiB,MAAA,CAAA,KAAA,GADrC,SACS,EADT,EAAA,GAAA,CAEM,SAAA,KAAA,CAAA,CAAA,CAAc,CACjB,GACEC,CAAC,GAADA,CAAAA,EACAd,KAAK,CAALA,cAAAA,CADAc,KACAd,CADAc,EAEAD,KAAK,CAALA,IAAAA,GAHF,aAAA,CAIE,CAEA,MAAO,CAAA,KAAK,CAAL,YAAA,CAAA,KAAA,CAA0B,CAC/BE,KAAK,CAAE,CAAC,CAAEC,UAAU,CAAE,EAAd,CAAD,CAAqBH,KAAK,CAALA,KAAAA,CAArB,KAAA,CADwB,CAA1B,CAAP,CAGD,CAED,MAAA,CAAA,KAAA,CA/BR,CAiBK,CAhBH,CADF,CAmCD,C,oBA5DkBb,KAAK,CAA1B,S,kBAAMD,M,WAEaE,a,kBAFbF,M,WAIaG,a,kBAJbH,M,SAMWI,W,kBANXJ,M,cAQgBK,gB,kBARhBL,M,gBAUkB,CACpBM,WAAW,CADS,IAAA,CAEpBC,OAAO,CAAE,KAFW,C,EAqDxB,GAAMM,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BK,SAAS,CAAE,CAQTC,cAAc,CAAEC,QAAQ,CAARA,EAAAA,GAAAA,SAAAA,CAAAA,EAAAA,CARP,CAAA,CASTC,gBAAgB,CATP,EAAA,CAUTC,SAAS,CAVA,gBAAA,CAWTC,cAAc,CAAE,YAXP,CADoB,CAAlB,CAAf,CAgBA,cAAeC,CAAAA,SAAS,CAAxB,MAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <View>\n *       <Button onPress={showDialog}>Show Dialog</Button>\n *       <Portal>\n *         <Dialog visible={visible} onDismiss={hideDialog}>\n *           <Dialog.Title>Alert</Dialog.Title>\n *           <Dialog.Content>\n *             <Paragraph>This is simple dialog</Paragraph>\n *           </Dialog.Content>\n *           <Dialog.Actions>\n *             <Button onPress={hideDialog}>Done</Button>\n *           </Dialog.Actions>\n *         </Dialog>\n *       </Portal>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Dialog extends React.Component<Props> {\n  // @component ./DialogContent.tsx\n  static Content = DialogContent;\n  // @component ./DialogActions.tsx\n  static Actions = DialogActions;\n  // @component ./DialogTitle.tsx\n  static Title = DialogTitle;\n  // @component ./DialogScrollArea.tsx\n  static ScrollArea = DialogScrollArea;\n\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  render() {\n    const {\n      children,\n      dismissable,\n      onDismiss,\n      visible,\n      style,\n      theme,\n    } = this.props;\n\n    return (\n      <Modal\n        dismissable={dismissable}\n        onDismiss={onDismiss}\n        visible={visible}\n        contentContainerStyle={[\n          {\n            borderRadius: theme.roundness,\n            backgroundColor:\n              theme.dark && theme.mode === 'adaptive'\n                ? (overlay(DIALOG_ELEVATION, theme.colors.surface) as string)\n                : theme.colors.surface,\n          },\n          styles.container,\n          style,\n        ]}\n      >\n        {React.Children.toArray(children)\n          .filter((child) => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              i === 0 &&\n              React.isValidElement(child) &&\n              child.type === DialogContent\n            ) {\n              // Dialog content is the first item, so we add a top padding\n              return React.cloneElement(child, {\n                style: [{ paddingTop: 24 }, child.props.style],\n              });\n            }\n\n            return child;\n          })}\n      </Modal>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"module"}