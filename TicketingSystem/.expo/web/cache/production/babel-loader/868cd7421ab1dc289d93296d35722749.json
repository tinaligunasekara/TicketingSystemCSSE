{"ast":null,"code":"'use strict';var Platform=require(\"../Utilities/Platform\");var normalizeColor=require(\"./normalizeColor\");function processColor(color){if(color===undefined||color===null){return color;}var normalizedColor=normalizeColor(color);if(normalizedColor===null||normalizedColor===undefined){return undefined;}if(typeof normalizedColor==='object'){var processColorObject=require(\"./PlatformColorValueTypes\").processColorObject;var processedColorObj=processColorObject(normalizedColor);if(processedColorObj!=null){return processedColorObj;}}if(typeof normalizedColor!=='number'){return null;}normalizedColor=(normalizedColor<<24|normalizedColor>>>8)>>>0;if(Platform.OS==='android'){normalizedColor=normalizedColor|0x0;}return normalizedColor;}module.exports=processColor;","map":{"version":3,"sources":["D:/SLIIT/3rd Year 2nd sem/CSSE/Final_Project_CSSE/frontendCSSE/TicketingSystem/node_modules/react-native/Libraries/StyleSheet/processColor.js"],"names":["Platform","require","normalizeColor","processColor","color","undefined","normalizedColor","processColorObject","processedColorObj","OS","module","exports"],"mappings":"AAUA,aAEA,GAAMA,CAAAA,QAAQ,CAAGC,OAAO,yBAAxB,CAEA,GAAMC,CAAAA,cAAc,CAAGD,OAAO,oBAA9B,CAQA,QAASE,CAAAA,YAAT,CAAsBC,KAAtB,CAA4E,CAC1E,GAAIA,KAAK,GAAKC,SAAV,EAAuBD,KAAK,GAAK,IAArC,CAA2C,CACzC,MAAOA,CAAAA,KAAP,CACD,CAED,GAAIE,CAAAA,eAAe,CAAGJ,cAAc,CAACE,KAAD,CAApC,CACA,GAAIE,eAAe,GAAK,IAApB,EAA4BA,eAAe,GAAKD,SAApD,CAA+D,CAC7D,MAAOA,CAAAA,SAAP,CACD,CAED,GAAI,MAAOC,CAAAA,eAAP,GAA2B,QAA/B,CAAyC,CACvC,GAAMC,CAAAA,kBAAkB,CAAGN,OAAO,6BAAP,CACxBM,kBADH,CAGA,GAAMC,CAAAA,iBAAiB,CAAGD,kBAAkB,CAACD,eAAD,CAA5C,CAEA,GAAIE,iBAAiB,EAAI,IAAzB,CAA+B,CAC7B,MAAOA,CAAAA,iBAAP,CACD,CACF,CAED,GAAI,MAAOF,CAAAA,eAAP,GAA2B,QAA/B,CAAyC,CACvC,MAAO,KAAP,CACD,CAGDA,eAAe,CAAG,CAAEA,eAAe,EAAI,EAApB,CAA2BA,eAAe,GAAK,CAAhD,IAAwD,CAA1E,CAEA,GAAIN,QAAQ,CAACS,EAAT,GAAgB,SAApB,CAA+B,CAK7BH,eAAe,CAAGA,eAAe,CAAG,GAApC,CACD,CACD,MAAOA,CAAAA,eAAP,CACD,CAEDI,MAAM,CAACC,OAAP,CAAiBR,YAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Platform = require('../Utilities/Platform');\n\nconst normalizeColor = require('./normalizeColor');\n\nimport type {ColorValue} from './StyleSheetTypes';\nimport type {NativeColorValue} from './PlatformColorValueTypes';\n\nexport type ProcessedColorValue = number | NativeColorValue;\n\n/* eslint no-bitwise: 0 */\nfunction processColor(color?: ?(number | ColorValue)): ?ProcessedColorValue {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor === 'object') {\n    const processColorObject = require('./PlatformColorValueTypes')\n      .processColorObject;\n\n    const processedColorObj = processColorObject(normalizedColor);\n\n    if (processedColorObj != null) {\n      return processedColorObj;\n    }\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  // Converts 0xrrggbbaa into 0xaarrggbb\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0;\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n  return normalizedColor;\n}\n\nmodule.exports = processColor;\n"]},"metadata":{},"sourceType":"script"}